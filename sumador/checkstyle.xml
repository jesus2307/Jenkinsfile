<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <property name="charset" value="UTF-8" />
  <property name="severity" value="error" />
  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.org/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true" />
  </module>
</module>

Es un ejemplo sencillo y se análiza el uso de tabuladores para identar el código

Añadimos al final de build.gradle 

apply plugin: "checkstyle"

checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml") 
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}


Lo probamos con el comando ./gradlew checkstyleMain (informe disponible en file:///home/usuario/Escritorio/tarea31pps/build/reports/checkstyle/main.html)

Por último añadimos la etapa de análisis estático de código al Jenkinsfile publicando el informe en Jenkins

stage("Static code analysis") {
               steps {
                    sh "./gradlew checkstyleMain"
                    publishHTML (target: [
                         reportDir: 'build/reports/checkstyle/',
                         reportFiles: 'main.html',
                         reportName: "Checkstyle Report"
                    ])
               }
          }
